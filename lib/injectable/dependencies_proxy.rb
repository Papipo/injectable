module Injectable
  # Memoizes the Dependencies generated by Dependency based on DependencyGraph
  class DependenciesProxy
    attr_reader :graph

    def initialize(graph)
      @graph = graph
      @instances = {}
    end

    # Get the instance of the dependency +name+
    def get(name)
      @instances[name] ||= graph[name].instance(memoized_dependencies_of(name))
    end

    private

    def memoized_dependencies_of(name)
      return [] if dependencies_of(name).blank?
      dependencies_of(name).each_with_object({}) { |dep, hash| hash[dep] = get(dep) }
    end

    def dependencies_of(name)
      graph[name].depends_on
    end
  end
end
